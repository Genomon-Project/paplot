(function() {
mut_data = {};

mut_data.Ids = ['SAMPLE00','SAMPLE01','SAMPLE02','SAMPLE03','SAMPLE04','SAMPLE05','SAMPLE06','SAMPLE07','SAMPLE08','SAMPLE09','SAMPLE10','SAMPLE11','SAMPLE12','SAMPLE13','SAMPLE14','SAMPLE15','SAMPLE16','SAMPLE17','SAMPLE18','SAMPLE19','SAMPLE20','SAMPLE21','SAMPLE22','SAMPLE23','SAMPLE24','SAMPLE25','SAMPLE26','SAMPLE27','SAMPLE28','SAMPLE29','SAMPLE30','SAMPLE31','SAMPLE32','SAMPLE33','SAMPLE34','SAMPLE35','SAMPLE36','SAMPLE37','SAMPLE38','SAMPLE39','SAMPLE40','SAMPLE41','SAMPLE42','SAMPLE43','SAMPLE44','SAMPLE45','SAMPLE46','SAMPLE47','SAMPLE48','SAMPLE49','SAMPLE50','SAMPLE51','SAMPLE52','SAMPLE53','SAMPLE54','SAMPLE55','SAMPLE56','SAMPLE57','SAMPLE58','SAMPLE59',];
mut_data.genes = ['ACO1','ACVR2B','AJUBA','AKT1','ALPK2','ANK3','APC','ARHGAP35','ARID1A','ARID2','ASXL1','ATP5B','AXIN2','AZGP1','B2M','BAP1','BCLAF1','BRAF','BRE','CAP2','CASP8','CBFB','CCDC120','CCDC6','CCND1','CD79B','CDH1','CDKN1A','CDKN2A','CEP76','CHD4','CHD8','CNBD1','CNKSR1','CTCF','CTNNB1','DDX3X','DIS3','DNAH12','DNMT3A','EGFR','ELF3','EP300','ERBB2','ERBB3','ERCC2','EZR','FAM46C','FAT1','FBXW7','FGFBP1','FGFR2','FLG','FLT3','FOXA1','GATA3','GNPTAB','GOT1','HIST1H1E','HRAS','HSP90AB1','IDH1','IDH2','IRF4','IRF6','ITGB7','ITPKB','KDM5C','KDM6A','KEAP1','KIT','KLHL8','KRAS','MAP2K4','MAP3K1','MED12','MED23','MGA','MICALCL','MLL','MLL2','MLL3','MLL4','MTOR','MYB','MYD88','MYOCD','NF1','NFE2L2','NOTCH1','NPM1','NRAS','NSD1','NTN4','ODAM','OMA1','OR52N1','OTUD7A','PBRM1','PCBP1','PDCD2L','PIK3CA','PIK3R1','PLCG2','POU2AF1','PPM1D','PPP2R1A','PTEN','PTPN11','QKI','RAC1','RAD21','RB1','RBM10','RHOA','RPS2','RUNX1','SACS','SELP','SEPT12','SERPINB13','SETD2','SETDB1','SF3B1','SGK1','SLC26A3','SLC44A3','SMAD4','SMARCA4','SMARCB1','SMC1A','SNX25','SPEN','SPOP','STAG2','STK11','STK19','TAP1','TBC1D12','TBL1XR1','TBX3','TCEB1','TCP11L2','TDRD10','TP53','TRAF3','TRIM23','TSC1','TTLL9','TXNDC8','U2AF1','VHL','WASF3','WT1','XPO1','ZNF180','ZNF483','ZNF620','ZNF750',];
mut_data.funcs = ['UTR3','UTR5','downstream','exonic','intergenic','intronic','ncRNA_exonic','ncRNA_intronic','ncRNA_splicing','splicing','upstream',];
mut_data.func_colors_n = ['#F39600','#E60011','#9CAEB7','#E85299','#00A4DB','#009943','#D7C447','#6BBB5A','#00ADA6','#007AC2','#B6007B',];
mut_data.mutation_header = [];
mut_data.tooltip_format = {
checker_title:{format:[[{label:'ID:',type:'fix',keys:[],ext:''},{label:'{id}',type:'str',keys:['id',],ext:''},{label:', gene:',type:'fix',keys:[],ext:''},{label:'{gene}',type:'str',keys:['gene',],ext:''},{label:', ',type:'fix',keys:[],ext:''},{label:'{#sum_item_value}',type:'str',keys:['#sum_item_value',],ext:''},],], keys: '{#sum_item_value} {gene} {id} '},checker_partial:{format:[[{label:'type[',type:'fix',keys:[],ext:''},{label:'{func}',type:'str',keys:['func',],ext:''},{label:']',type:'fix',keys:[],ext:''},],], keys: '{func} '},gene_title:{format:[[{label:'gene:',type:'fix',keys:[],ext:''},{label:'{gene}',type:'str',keys:['gene',],ext:''},{label:', ',type:'fix',keys:[],ext:''},{label:'{#sum_item_value}',type:'str',keys:['#sum_item_value',],ext:''},],], keys: '{#sum_item_value} {gene} '},gene_partial:{format:[[{label:'func:',type:'fix',keys:[],ext:''},{label:'{func}',type:'str',keys:['func',],ext:''},{label:', ',type:'fix',keys:[],ext:''},{label:'{#item_value}',type:'str',keys:['#item_value',],ext:''},],], keys: '{#item_value} {func} '},id_title:{format:[[{label:'ID:',type:'fix',keys:[],ext:''},{label:'{id}',type:'str',keys:['id',],ext:''},{label:', ',type:'fix',keys:[],ext:''},{label:'{#sum_item_value}',type:'str',keys:['#sum_item_value',],ext:''},],], keys: '{#sum_item_value} {id} '},id_partial:{format:[[{label:'func:',type:'fix',keys:[],ext:''},{label:'{func}',type:'str',keys:['func',],ext:''},{label:', ',type:'fix',keys:[],ext:''},{label:'{#item_value}',type:'str',keys:['#item_value',],ext:''},],], keys: '{#item_value} {func} '},
};
mut_data.mutations = [[0,0,26,1,[[],]],[0,0,72,1,[[],]],[0,2,145,1,[[],]],[0,3,26,2,[[],[],]],[0,3,33,1,[[],]],[0,3,53,1,[[],]],[0,3,55,2,[[],[],]],[0,3,72,1,[[],]],[0,3,107,2,[[],[],]],[0,4,53,1,[[],]],[0,5,17,1,[[],]],[0,5,33,1,[[],]],[0,5,53,2,[[],[],]],[0,5,55,1,[[],]],[0,5,101,1,[[],]],[0,5,107,1,[[],]],[0,5,145,1,[[],]],[1,0,88,1,[[],]],[1,2,152,1,[[],]],[1,3,91,2,[[],[],]],[1,3,97,2,[[],[],]],[1,5,60,4,[[],[],[],[],]],[1,5,88,2,[[],[],]],[1,5,91,4,[[],[],[],[],]],[1,5,97,3,[[],[],[],]],[1,5,138,4,[[],[],[],[],]],[1,5,152,4,[[],[],[],[],]],[1,8,60,1,[[],]],[1,8,97,1,[[],]],[1,9,152,1,[[],]],[2,1,88,1,[[],]],[2,3,14,1,[[],]],[2,3,55,2,[[],[],]],[2,3,62,1,[[],]],[2,3,88,1,[[],]],[2,3,91,1,[[],]],[2,3,107,1,[[],]],[2,5,1,1,[[],]],[2,5,39,1,[[],]],[2,5,49,1,[[],]],[2,5,55,3,[[],[],[],]],[2,5,61,1,[[],]],[2,5,62,2,[[],[],]],[2,5,76,1,[[],]],[2,5,91,3,[[],[],[],]],[2,7,1,1,[[],]],[2,8,39,1,[[],]],[2,9,80,1,[[],]],[2,9,107,1,[[],]],[3,2,119,1,[[],]],[3,3,19,2,[[],[],]],[3,3,21,2,[[],[],]],[3,3,55,1,[[],]],[3,3,72,1,[[],]],[3,5,19,3,[[],[],[],]],[3,5,21,1,[[],]],[3,5,39,2,[[],[],]],[3,5,55,2,[[],[],]],[3,5,72,1,[[],]],[3,5,101,2,[[],[],]],[3,5,102,2,[[],[],]],[3,9,102,1,[[],]],[4,0,90,1,[[],]],[4,0,135,1,[[],]],[4,2,112,1,[[],]],[4,3,28,2,[[],[],]],[4,3,61,1,[[],]],[4,3,69,1,[[],]],[4,3,90,1,[[],]],[4,3,93,1,[[],]],[4,3,112,2,[[],[],]],[4,3,150,1,[[],]],[4,5,61,4,[[],[],[],[],]],[4,5,69,2,[[],[],]],[4,5,90,3,[[],[],[],]],[4,5,93,1,[[],]],[4,5,107,2,[[],[],]],[4,5,112,2,[[],[],]],[4,5,135,5,[[],[],[],[],[],]],[4,5,150,2,[[],[],]],[4,6,150,1,[[],]],[5,1,72,1,[[],]],[5,2,53,1,[[],]],[5,3,53,1,[[],]],[5,3,55,3,[[],[],[],]],[5,3,72,1,[[],]],[5,3,107,1,[[],]],[5,5,3,1,[[],]],[5,5,53,2,[[],[],]],[5,5,62,1,[[],]],[5,5,72,1,[[],]],[5,5,80,1,[[],]],[5,5,91,1,[[],]],[5,5,107,2,[[],[],]],[5,6,55,1,[[],]],[5,7,53,2,[[],[],]],[5,9,107,1,[[],]],[5,10,3,1,[[],]],[5,10,55,1,[[],]],[6,1,137,1,[[],]],[6,2,17,1,[[],]],[6,2,28,1,[[],]],[6,3,17,3,[[],[],[],]],[6,3,26,1,[[],]],[6,3,28,2,[[],[],]],[6,3,101,1,[[],]],[6,5,17,4,[[],[],[],[],]],[6,5,26,5,[[],[],[],[],[],]],[6,5,28,2,[[],[],]],[6,5,101,3,[[],[],[],]],[6,5,123,1,[[],]],[6,5,137,1,[[],]],[6,6,26,1,[[],]],[6,6,28,1,[[],]],[6,7,17,1,[[],]],[6,9,101,1,[[],]],[7,0,6,1,[[],]],[7,0,98,1,[[],]],[7,3,28,1,[[],]],[7,3,53,1,[[],]],[7,3,74,1,[[],]],[7,3,91,1,[[],]],[7,3,98,1,[[],]],[7,3,144,1,[[],]],[7,4,28,1,[[],]],[7,5,6,3,[[],[],[],]],[7,5,28,2,[[],[],]],[7,5,53,2,[[],[],]],[7,5,74,1,[[],]],[7,5,91,2,[[],[],]],[7,5,98,1,[[],]],[7,5,102,1,[[],]],[7,6,6,1,[[],]],[7,6,144,1,[[],]],[7,8,53,1,[[],]],[7,9,28,1,[[],]],[8,1,150,1,[[],]],[8,2,26,1,[[],]],[8,3,26,1,[[],]],[8,3,91,1,[[],]],[8,3,135,3,[[],[],[],]],[8,4,39,1,[[],]],[8,5,15,4,[[],[],[],[],]],[8,5,28,1,[[],]],[8,5,39,1,[[],]],[8,5,49,3,[[],[],[],]],[8,5,89,1,[[],]],[8,5,91,3,[[],[],[],]],[8,5,107,1,[[],]],[8,5,135,4,[[],[],[],[],]],[8,5,143,1,[[],]],[8,5,150,4,[[],[],[],[],]],[8,8,28,1,[[],]],[8,10,150,1,[[],]],[9,0,75,1,[[],]],[9,3,0,5,[[],[],[],[],[],]],[9,3,20,2,[[],[],]],[9,3,37,1,[[],]],[9,3,39,1,[[],]],[9,3,61,1,[[],]],[9,3,75,2,[[],[],]],[9,3,127,1,[[],]],[9,4,0,1,[[],]],[9,4,20,1,[[],]],[9,5,0,4,[[],[],[],[],]],[9,5,20,4,[[],[],[],[],]],[9,5,37,1,[[],]],[9,5,39,3,[[],[],[],]],[9,5,61,1,[[],]],[9,5,75,3,[[],[],[],]],[9,5,127,2,[[],[],]],[9,6,0,1,[[],]],[9,6,20,1,[[],]],[9,7,39,1,[[],]],[9,7,75,1,[[],]],[9,8,0,1,[[],]],[9,9,0,1,[[],]],[9,10,0,1,[[],]],[10,0,67,1,[[],]],[10,0,113,1,[[],]],[10,1,59,1,[[],]],[10,2,67,1,[[],]],[10,2,107,1,[[],]],[10,3,28,1,[[],]],[10,3,39,2,[[],[],]],[10,3,50,2,[[],[],]],[10,3,53,1,[[],]],[10,3,67,3,[[],[],[],]],[10,3,101,2,[[],[],]],[10,3,102,1,[[],]],[10,3,103,1,[[],]],[10,3,112,2,[[],[],]],[10,3,113,1,[[],]],[10,4,103,1,[[],]],[10,5,28,2,[[],[],]],[10,5,39,2,[[],[],]],[10,5,50,1,[[],]],[10,5,67,1,[[],]],[10,5,101,3,[[],[],[],]],[10,5,102,4,[[],[],[],[],]],[10,5,103,3,[[],[],[],]],[10,5,107,2,[[],[],]],[10,5,113,3,[[],[],[],]],[10,5,144,1,[[],]],[10,8,28,1,[[],]],[10,8,39,1,[[],]],[10,9,28,1,[[],]],[10,9,144,1,[[],]],[11,0,36,1,[[],]],[11,0,101,1,[[],]],[11,2,12,1,[[],]],[11,2,36,1,[[],]],[11,3,26,1,[[],]],[11,3,28,1,[[],]],[11,3,40,2,[[],[],]],[11,3,83,3,[[],[],[],]],[11,3,90,1,[[],]],[11,3,101,1,[[],]],[11,3,150,2,[[],[],]],[11,3,157,1,[[],]],[11,4,28,1,[[],]],[11,5,12,2,[[],[],]],[11,5,26,1,[[],]],[11,5,36,1,[[],]],[11,5,40,1,[[],]],[11,5,83,1,[[],]],[11,5,90,2,[[],[],]],[11,5,115,2,[[],[],]],[11,5,133,1,[[],]],[11,5,150,2,[[],[],]],[11,5,157,2,[[],[],]],[11,8,83,1,[[],]],[11,10,28,1,[[],]],[12,3,26,2,[[],[],]],[12,3,28,2,[[],[],]],[12,3,51,1,[[],]],[12,3,72,1,[[],]],[12,3,86,1,[[],]],[12,3,87,1,[[],]],[12,3,91,1,[[],]],[12,3,101,2,[[],[],]],[12,3,102,2,[[],[],]],[12,3,155,3,[[],[],[],]],[12,5,16,1,[[],]],[12,5,28,1,[[],]],[12,5,51,3,[[],[],[],]],[12,5,72,3,[[],[],[],]],[12,5,86,2,[[],[],]],[12,5,91,2,[[],[],]],[12,5,101,1,[[],]],[12,5,102,1,[[],]],[12,5,107,2,[[],[],]],[12,5,155,2,[[],[],]],[12,8,87,1,[[],]],[12,9,87,1,[[],]],[12,9,91,1,[[],]],[12,10,101,1,[[],]],[13,0,96,1,[[],]],[13,0,101,1,[[],]],[13,1,123,1,[[],]],[13,1,127,1,[[],]],[13,3,6,1,[[],]],[13,3,39,1,[[],]],[13,3,90,1,[[],]],[13,3,96,1,[[],]],[13,3,101,1,[[],]],[13,3,134,1,[[],]],[13,3,148,2,[[],[],]],[13,3,149,1,[[],]],[13,4,55,1,[[],]],[13,4,71,1,[[],]],[13,4,127,1,[[],]],[13,5,6,1,[[],]],[13,5,8,1,[[],]],[13,5,26,1,[[],]],[13,5,67,1,[[],]],[13,5,90,1,[[],]],[13,5,104,2,[[],[],]],[13,5,123,1,[[],]],[13,5,149,1,[[],]],[13,6,71,1,[[],]],[13,7,26,1,[[],]],[13,9,101,1,[[],]],[14,0,102,1,[[],]],[14,1,6,1,[[],]],[14,3,2,1,[[],]],[14,3,6,2,[[],[],]],[14,3,44,2,[[],[],]],[14,3,61,1,[[],]],[14,3,81,1,[[],]],[14,3,102,2,[[],[],]],[14,4,2,1,[[],]],[14,4,81,1,[[],]],[14,5,2,1,[[],]],[14,5,6,3,[[],[],[],]],[14,5,22,2,[[],[],]],[14,5,44,1,[[],]],[14,5,81,2,[[],[],]],[14,5,102,2,[[],[],]],[14,9,22,1,[[],]],[15,0,66,1,[[],]],[15,0,74,1,[[],]],[15,1,46,1,[[],]],[15,1,53,1,[[],]],[15,3,17,2,[[],[],]],[15,3,39,3,[[],[],[],]],[15,3,46,5,[[],[],[],[],[],]],[15,3,66,4,[[],[],[],[],]],[15,3,74,1,[[],]],[15,4,17,1,[[],]],[15,5,17,1,[[],]],[15,5,39,3,[[],[],[],]],[15,5,46,3,[[],[],[],]],[15,5,53,4,[[],[],[],[],]],[15,5,66,5,[[],[],[],[],[],]],[15,5,74,5,[[],[],[],[],[],]],[15,7,39,1,[[],]],[15,7,53,1,[[],]],[15,9,66,1,[[],]],[15,9,74,1,[[],]],[15,10,46,1,[[],]],[15,10,74,1,[[],]],[16,1,39,1,[[],]],[16,1,81,1,[[],]],[16,2,24,1,[[],]],[16,2,61,1,[[],]],[16,2,100,1,[[],]],[16,3,26,3,[[],[],[],]],[16,3,44,1,[[],]],[16,3,61,1,[[],]],[16,3,69,3,[[],[],[],]],[16,3,72,2,[[],[],]],[16,3,90,1,[[],]],[16,3,147,2,[[],[],]],[16,5,24,2,[[],[],]],[16,5,26,2,[[],[],]],[16,5,28,1,[[],]],[16,5,44,3,[[],[],[],]],[16,5,53,1,[[],]],[16,5,61,1,[[],]],[16,5,72,1,[[],]],[16,5,80,2,[[],[],]],[16,5,88,1,[[],]],[16,5,100,1,[[],]],[16,5,107,1,[[],]],[16,5,147,1,[[],]],[16,6,44,1,[[],]],[16,9,39,1,[[],]],[16,9,44,1,[[],]],[17,0,55,1,[[],]],[17,1,68,1,[[],]],[17,2,28,1,[[],]],[17,3,20,2,[[],[],]],[17,3,28,1,[[],]],[17,3,45,1,[[],]],[17,3,55,1,[[],]],[17,3,62,1,[[],]],[17,3,68,1,[[],]],[17,3,87,1,[[],]],[17,3,101,1,[[],]],[17,3,121,1,[[],]],[17,5,20,1,[[],]],[17,5,45,1,[[],]],[17,5,62,1,[[],]],[17,5,68,2,[[],[],]],[17,5,121,1,[[],]],[17,5,122,1,[[],]],[17,5,124,1,[[],]],[17,5,133,1,[[],]],[17,9,45,1,[[],]],[18,0,123,2,[[],[],]],[18,1,90,1,[[],]],[18,2,31,1,[[],]],[18,2,121,1,[[],]],[18,3,6,2,[[],[],]],[18,3,31,4,[[],[],[],[],]],[18,3,39,3,[[],[],[],]],[18,3,55,1,[[],]],[18,3,74,2,[[],[],]],[18,3,90,2,[[],[],]],[18,3,107,1,[[],]],[18,3,121,1,[[],]],[18,5,26,3,[[],[],[],]],[18,5,31,1,[[],]],[18,5,39,4,[[],[],[],[],]],[18,5,41,2,[[],[],]],[18,5,55,1,[[],]],[18,5,74,2,[[],[],]],[18,5,90,3,[[],[],[],]],[18,5,121,1,[[],]],[18,5,123,1,[[],]],[18,7,31,1,[[],]],[18,7,107,1,[[],]],[18,8,41,1,[[],]],[18,9,123,1,[[],]],[18,10,26,1,[[],]],[19,1,135,1,[[],]],[19,3,6,2,[[],[],]],[19,3,17,1,[[],]],[19,3,55,3,[[],[],[],]],[19,3,107,1,[[],]],[19,3,116,2,[[],[],]],[19,3,135,1,[[],]],[19,4,56,1,[[],]],[19,5,6,2,[[],[],]],[19,5,17,1,[[],]],[19,5,20,3,[[],[],[],]],[19,5,55,2,[[],[],]],[19,5,56,2,[[],[],]],[19,5,107,3,[[],[],[],]],[19,5,116,2,[[],[],]],[19,5,128,3,[[],[],[],]],[19,5,135,1,[[],]],[20,0,140,1,[[],]],[20,1,43,1,[[],]],[20,3,5,4,[[],[],[],[],]],[20,3,20,1,[[],]],[20,3,26,3,[[],[],[],]],[20,3,28,1,[[],]],[20,3,43,1,[[],]],[20,3,53,2,[[],[],]],[20,3,55,1,[[],]],[20,3,67,1,[[],]],[20,3,74,1,[[],]],[20,3,90,3,[[],[],[],]],[20,3,135,3,[[],[],[],]],[20,3,140,2,[[],[],]],[20,4,55,1,[[],]],[20,5,5,2,[[],[],]],[20,5,20,2,[[],[],]],[20,5,26,2,[[],[],]],[20,5,28,1,[[],]],[20,5,43,1,[[],]],[20,5,53,1,[[],]],[20,5,55,2,[[],[],]],[20,5,67,1,[[],]],[20,5,74,3,[[],[],[],]],[20,5,127,4,[[],[],[],[],]],[20,5,135,1,[[],]],[20,5,140,2,[[],[],]],[21,0,28,1,[[],]],[21,0,98,1,[[],]],[21,1,27,1,[[],]],[21,1,98,1,[[],]],[21,2,17,1,[[],]],[21,3,17,1,[[],]],[21,3,28,1,[[],]],[21,3,34,2,[[],[],]],[21,3,53,1,[[],]],[21,3,80,1,[[],]],[21,3,91,1,[[],]],[21,3,98,2,[[],[],]],[21,3,125,2,[[],[],]],[21,4,13,1,[[],]],[21,4,102,1,[[],]],[21,5,13,1,[[],]],[21,5,17,1,[[],]],[21,5,27,3,[[],[],[],]],[21,5,28,2,[[],[],]],[21,5,34,1,[[],]],[21,5,73,4,[[],[],[],[],]],[21,5,80,1,[[],]],[21,5,90,3,[[],[],[],]],[21,5,91,2,[[],[],]],[21,5,102,3,[[],[],[],]],[21,5,125,1,[[],]],[21,7,90,1,[[],]],[21,8,34,1,[[],]],[21,10,73,1,[[],]],[22,0,6,1,[[],]],[22,3,6,1,[[],]],[22,3,7,1,[[],]],[22,3,21,2,[[],[],]],[22,3,23,1,[[],]],[22,3,26,1,[[],]],[22,3,34,1,[[],]],[22,3,53,1,[[],]],[22,3,101,3,[[],[],[],]],[22,4,23,1,[[],]],[22,5,6,3,[[],[],[],]],[22,5,7,2,[[],[],]],[22,5,21,1,[[],]],[22,5,23,3,[[],[],[],]],[22,5,34,3,[[],[],[],]],[22,5,49,3,[[],[],[],]],[22,5,53,4,[[],[],[],[],]],[22,5,101,4,[[],[],[],[],]],[22,5,111,1,[[],]],[22,8,26,1,[[],]],[22,8,111,1,[[],]],[22,9,101,1,[[],]],[22,10,53,1,[[],]],[23,0,17,1,[[],]],[23,1,153,1,[[],]],[23,3,55,3,[[],[],[],]],[23,3,61,3,[[],[],[],]],[23,3,73,2,[[],[],]],[23,3,91,1,[[],]],[23,3,129,1,[[],]],[23,3,153,3,[[],[],[],]],[23,5,17,2,[[],[],]],[23,5,55,3,[[],[],[],]],[23,5,59,1,[[],]],[23,5,91,3,[[],[],[],]],[23,5,123,4,[[],[],[],[],]],[23,5,129,2,[[],[],]],[23,7,129,1,[[],]],[23,8,91,1,[[],]],[23,9,61,1,[[],]],[23,10,59,1,[[],]],[23,10,73,1,[[],]],[23,10,91,1,[[],]],[24,0,28,1,[[],]],[24,0,102,1,[[],]],[24,3,6,2,[[],[],]],[24,3,17,3,[[],[],[],]],[24,3,26,2,[[],[],]],[24,3,101,2,[[],[],]],[24,3,112,1,[[],]],[24,3,121,1,[[],]],[24,5,6,3,[[],[],[],]],[24,5,17,2,[[],[],]],[24,5,26,2,[[],[],]],[24,5,28,3,[[],[],[],]],[24,5,49,6,[[],[],[],[],[],[],]],[24,5,72,2,[[],[],]],[24,5,101,2,[[],[],]],[24,5,102,3,[[],[],[],]],[24,5,112,2,[[],[],]],[24,5,121,1,[[],]],[24,6,28,1,[[],]],[24,7,49,2,[[],[],]],[25,1,28,1,[[],]],[25,1,102,1,[[],]],[25,2,98,1,[[],]],[25,3,6,2,[[],[],]],[25,3,11,2,[[],[],]],[25,3,28,1,[[],]],[25,3,37,1,[[],]],[25,3,49,2,[[],[],]],[25,3,53,1,[[],]],[25,3,98,1,[[],]],[25,3,129,1,[[],]],[25,5,6,2,[[],[],]],[25,5,11,2,[[],[],]],[25,5,28,3,[[],[],[],]],[25,5,37,3,[[],[],[],]],[25,5,53,4,[[],[],[],[],]],[25,5,98,3,[[],[],[],]],[25,5,129,1,[[],]],[25,7,98,2,[[],[],]],[25,8,98,1,[[],]],[25,9,117,1,[[],]],[25,10,11,1,[[],]],[26,0,101,1,[[],]],[26,3,6,1,[[],]],[26,3,7,1,[[],]],[26,3,28,1,[[],]],[26,3,39,1,[[],]],[26,3,101,1,[[],]],[26,3,116,2,[[],[],]],[26,3,153,1,[[],]],[26,5,6,1,[[],]],[26,5,7,1,[[],]],[26,5,28,2,[[],[],]],[26,5,31,1,[[],]],[26,5,49,1,[[],]],[26,5,54,2,[[],[],]],[26,5,65,3,[[],[],[],]],[26,5,81,1,[[],]],[26,5,101,1,[[],]],[26,9,28,1,[[],]],[27,2,125,1,[[],]],[27,3,8,1,[[],]],[27,3,25,2,[[],[],]],[27,3,29,1,[[],]],[27,3,72,2,[[],[],]],[27,3,78,1,[[],]],[27,3,85,1,[[],]],[27,3,99,1,[[],]],[27,4,78,1,[[],]],[27,4,139,1,[[],]],[27,5,6,1,[[],]],[27,5,8,2,[[],[],]],[27,5,18,3,[[],[],[],]],[27,5,25,2,[[],[],]],[27,5,29,1,[[],]],[27,5,58,4,[[],[],[],[],]],[27,5,72,3,[[],[],[],]],[27,5,85,1,[[],]],[27,5,91,1,[[],]],[27,5,99,2,[[],[],]],[27,5,139,2,[[],[],]],[27,7,139,1,[[],]],[27,8,78,1,[[],]],[27,9,72,1,[[],]],[28,0,127,1,[[],]],[28,1,39,1,[[],]],[28,1,127,1,[[],]],[28,2,3,2,[[],[],]],[28,3,3,3,[[],[],[],]],[28,3,39,1,[[],]],[28,3,64,2,[[],[],]],[28,5,3,3,[[],[],[],]],[28,5,39,5,[[],[],[],[],[],]],[28,5,64,7,[[],[],[],[],[],[],[],]],[28,5,127,3,[[],[],[],]],[28,6,3,1,[[],]],[28,6,39,3,[[],[],[],]],[28,6,127,1,[[],]],[28,7,3,1,[[],]],[28,7,64,1,[[],]],[28,9,3,1,[[],]],[28,9,39,1,[[],]],[28,10,127,2,[[],[],]],[29,1,6,1,[[],]],[29,2,55,1,[[],]],[29,3,6,1,[[],]],[29,3,17,1,[[],]],[29,3,40,1,[[],]],[29,3,55,1,[[],]],[29,3,59,3,[[],[],[],]],[29,3,144,2,[[],[],]],[29,5,6,2,[[],[],]],[29,5,17,1,[[],]],[29,5,30,1,[[],]],[29,5,55,1,[[],]],[29,5,59,3,[[],[],[],]],[29,5,74,2,[[],[],]],[29,5,144,2,[[],[],]],[29,6,40,1,[[],]],[30,0,89,1,[[],]],[30,3,20,1,[[],]],[30,3,70,1,[[],]],[30,3,85,2,[[],[],]],[30,3,89,1,[[],]],[30,3,90,1,[[],]],[30,3,121,1,[[],]],[30,3,144,1,[[],]],[30,5,18,2,[[],[],]],[30,5,21,1,[[],]],[30,5,39,1,[[],]],[30,5,85,2,[[],[],]],[30,5,89,1,[[],]],[30,5,90,1,[[],]],[30,5,92,1,[[],]],[30,5,144,3,[[],[],[],]],[31,2,8,1,[[],]],[31,3,8,1,[[],]],[31,3,17,2,[[],[],]],[31,3,49,2,[[],[],]],[31,3,69,1,[[],]],[31,3,150,2,[[],[],]],[31,4,69,1,[[],]],[31,4,91,1,[[],]],[31,5,49,4,[[],[],[],[],]],[31,5,69,3,[[],[],[],]],[31,5,90,2,[[],[],]],[31,5,150,1,[[],]],[31,6,127,1,[[],]],[31,8,150,1,[[],]],[32,1,28,1,[[],]],[32,1,39,1,[[],]],[32,3,6,1,[[],]],[32,3,17,4,[[],[],[],[],]],[32,3,26,1,[[],]],[32,3,91,3,[[],[],[],]],[32,3,92,1,[[],]],[32,3,133,1,[[],]],[32,3,141,1,[[],]],[32,4,133,1,[[],]],[32,5,6,1,[[],]],[32,5,17,2,[[],[],]],[32,5,26,2,[[],[],]],[32,5,28,5,[[],[],[],[],[],]],[32,5,39,4,[[],[],[],[],]],[32,5,53,2,[[],[],]],[32,5,85,1,[[],]],[32,5,91,1,[[],]],[32,5,133,2,[[],[],]],[32,5,141,1,[[],]],[32,6,17,1,[[],]],[32,7,91,1,[[],]],[32,7,141,1,[[],]],[32,9,91,1,[[],]],[32,10,92,1,[[],]],[33,0,72,1,[[],]],[33,0,121,1,[[],]],[33,2,72,1,[[],]],[33,3,28,1,[[],]],[33,3,57,2,[[],[],]],[33,3,72,1,[[],]],[33,3,77,4,[[],[],[],[],]],[33,3,87,1,[[],]],[33,3,121,2,[[],[],]],[33,5,28,4,[[],[],[],[],]],[33,5,57,3,[[],[],[],]],[33,5,72,6,[[],[],[],[],[],[],]],[33,5,77,5,[[],[],[],[],[],]],[33,5,87,1,[[],]],[33,5,121,2,[[],[],]],[33,6,57,1,[[],]],[33,8,28,1,[[],]],[33,8,57,1,[[],]],[34,0,144,1,[[],]],[34,3,15,3,[[],[],[],]],[34,3,47,1,[[],]],[34,3,49,1,[[],]],[34,3,61,1,[[],]],[34,3,73,1,[[],]],[34,3,84,2,[[],[],]],[34,3,87,4,[[],[],[],[],]],[34,3,88,3,[[],[],[],]],[34,3,89,1,[[],]],[34,5,15,2,[[],[],]],[34,5,28,2,[[],[],]],[34,5,47,1,[[],]],[34,5,49,1,[[],]],[34,5,61,2,[[],[],]],[34,5,62,1,[[],]],[34,5,73,3,[[],[],[],]],[34,5,84,2,[[],[],]],[34,5,87,1,[[],]],[34,5,88,1,[[],]],[34,5,144,3,[[],[],[],]],[34,6,73,1,[[],]],[34,6,84,1,[[],]],[34,7,49,1,[[],]],[34,10,87,1,[[],]],[35,1,112,1,[[],]],[35,3,4,2,[[],[],]],[35,3,10,2,[[],[],]],[35,3,33,4,[[],[],[],[],]],[35,3,67,1,[[],]],[35,3,73,2,[[],[],]],[35,3,112,3,[[],[],[],]],[35,3,127,3,[[],[],[],]],[35,5,4,2,[[],[],]],[35,5,10,3,[[],[],[],]],[35,5,33,2,[[],[],]],[35,5,67,7,[[],[],[],[],[],[],[],]],[35,5,73,3,[[],[],[],]],[35,5,112,3,[[],[],[],]],[35,5,127,2,[[],[],]],[35,6,127,1,[[],]],[35,8,33,1,[[],]],[35,9,33,1,[[],]],[35,9,67,1,[[],]],[35,10,67,1,[[],]],[36,3,6,1,[[],]],[36,3,49,1,[[],]],[36,3,50,2,[[],[],]],[36,3,57,1,[[],]],[36,3,62,1,[[],]],[36,3,72,1,[[],]],[36,3,133,1,[[],]],[36,5,6,1,[[],]],[36,5,17,2,[[],[],]],[36,5,49,1,[[],]],[36,5,50,3,[[],[],[],]],[36,5,90,2,[[],[],]],[36,5,114,1,[[],]],[36,7,19,1,[[],]],[36,10,53,1,[[],]],[36,10,90,1,[[],]],[37,1,135,1,[[],]],[37,3,6,1,[[],]],[37,3,72,6,[[],[],[],[],[],[],]],[37,3,101,2,[[],[],]],[37,3,106,2,[[],[],]],[37,3,116,3,[[],[],[],]],[37,3,135,1,[[],]],[37,5,6,5,[[],[],[],[],[],]],[37,5,20,1,[[],]],[37,5,72,3,[[],[],[],]],[37,5,101,4,[[],[],[],[],]],[37,5,106,3,[[],[],[],]],[37,5,116,3,[[],[],[],]],[37,5,135,3,[[],[],[],]],[37,6,106,1,[[],]],[37,6,135,1,[[],]],[37,7,20,1,[[],]],[37,9,6,2,[[],[],]],[37,9,116,1,[[],]],[37,10,101,1,[[],]],[37,10,106,1,[[],]],[38,0,55,1,[[],]],[38,1,21,1,[[],]],[38,1,28,1,[[],]],[38,2,21,1,[[],]],[38,3,20,1,[[],]],[38,3,21,1,[[],]],[38,3,26,2,[[],[],]],[38,3,76,1,[[],]],[38,3,144,1,[[],]],[38,3,148,2,[[],[],]],[38,4,43,1,[[],]],[38,5,6,1,[[],]],[38,5,21,4,[[],[],[],[],]],[38,5,26,2,[[],[],]],[38,5,55,2,[[],[],]],[38,5,76,3,[[],[],[],]],[38,5,144,5,[[],[],[],[],[],]],[38,5,148,3,[[],[],[],]],[38,7,5,1,[[],]],[38,7,144,1,[[],]],[38,8,5,1,[[],]],[38,10,6,1,[[],]],[38,10,144,1,[[],]],[39,3,17,1,[[],]],[39,3,49,1,[[],]],[39,3,53,2,[[],[],]],[39,3,91,1,[[],]],[39,3,101,1,[[],]],[39,4,17,1,[[],]],[39,4,107,1,[[],]],[39,5,6,2,[[],[],]],[39,5,17,1,[[],]],[39,5,39,2,[[],[],]],[39,5,87,1,[[],]],[39,5,91,1,[[],]],[39,5,107,4,[[],[],[],[],]],[39,5,130,1,[[],]],[40,1,3,1,[[],]],[40,3,3,1,[[],]],[40,3,17,1,[[],]],[40,3,28,1,[[],]],[40,3,61,2,[[],[],]],[40,3,74,2,[[],[],]],[40,3,108,1,[[],]],[40,3,136,1,[[],]],[40,3,144,2,[[],[],]],[40,4,26,1,[[],]],[40,5,3,3,[[],[],[],]],[40,5,17,2,[[],[],]],[40,5,26,1,[[],]],[40,5,28,3,[[],[],[],]],[40,5,59,2,[[],[],]],[40,5,61,4,[[],[],[],[],]],[40,5,74,2,[[],[],]],[40,5,108,1,[[],]],[40,5,136,4,[[],[],[],[],]],[40,5,144,1,[[],]],[40,6,59,1,[[],]],[40,6,144,1,[[],]],[40,6,155,1,[[],]],[40,7,74,1,[[],]],[40,7,155,1,[[],]],[40,8,136,1,[[],]],[41,1,28,1,[[],]],[41,2,15,1,[[],]],[41,3,3,3,[[],[],[],]],[41,3,9,3,[[],[],[],]],[41,3,13,1,[[],]],[41,3,26,2,[[],[],]],[41,3,28,2,[[],[],]],[41,3,72,1,[[],]],[41,3,91,2,[[],[],]],[41,4,91,1,[[],]],[41,5,3,1,[[],]],[41,5,9,1,[[],]],[41,5,13,3,[[],[],[],]],[41,5,15,4,[[],[],[],[],]],[41,5,17,3,[[],[],[],]],[41,5,26,3,[[],[],[],]],[41,5,28,1,[[],]],[41,5,53,3,[[],[],[],]],[41,5,91,3,[[],[],[],]],[41,5,126,7,[[],[],[],[],[],[],[],]],[41,7,17,1,[[],]],[42,2,116,1,[[],]],[42,3,26,1,[[],]],[42,3,28,1,[[],]],[42,3,53,1,[[],]],[42,3,61,3,[[],[],[],]],[42,3,73,1,[[],]],[42,3,91,1,[[],]],[42,3,92,4,[[],[],[],[],]],[42,3,102,1,[[],]],[42,3,107,1,[[],]],[42,3,116,1,[[],]],[42,4,53,1,[[],]],[42,5,26,2,[[],[],]],[42,5,28,1,[[],]],[42,5,53,2,[[],[],]],[42,5,61,3,[[],[],[],]],[42,5,73,2,[[],[],]],[42,5,91,5,[[],[],[],[],[],]],[42,5,92,5,[[],[],[],[],[],]],[42,5,102,3,[[],[],[],]],[42,5,107,1,[[],]],[42,5,116,1,[[],]],[42,6,91,1,[[],]],[42,6,116,1,[[],]],[43,0,101,1,[[],]],[43,2,6,1,[[],]],[43,3,6,3,[[],[],[],]],[43,3,28,2,[[],[],]],[43,3,61,1,[[],]],[43,3,67,3,[[],[],[],]],[43,3,74,1,[[],]],[43,3,110,2,[[],[],]],[43,3,153,1,[[],]],[43,4,28,1,[[],]],[43,4,153,1,[[],]],[43,5,6,1,[[],]],[43,5,9,1,[[],]],[43,5,26,1,[[],]],[43,5,28,2,[[],[],]],[43,5,32,1,[[],]],[43,5,34,2,[[],[],]],[43,5,61,2,[[],[],]],[43,5,67,2,[[],[],]],[43,5,74,2,[[],[],]],[43,5,91,2,[[],[],]],[43,5,101,1,[[],]],[43,5,110,1,[[],]],[43,5,153,1,[[],]],[43,7,101,1,[[],]],[43,8,6,1,[[],]],[43,9,61,1,[[],]],[44,1,8,1,[[],]],[44,1,67,1,[[],]],[44,2,6,1,[[],]],[44,3,6,1,[[],]],[44,3,61,1,[[],]],[44,3,91,2,[[],[],]],[44,3,94,1,[[],]],[44,3,144,2,[[],[],]],[44,3,156,3,[[],[],[],]],[44,5,6,1,[[],]],[44,5,59,2,[[],[],]],[44,5,61,2,[[],[],]],[44,5,67,1,[[],]],[44,5,91,3,[[],[],[],]],[44,5,101,2,[[],[],]],[44,5,144,2,[[],[],]],[44,5,156,1,[[],]],[44,6,59,2,[[],[],]],[44,7,6,1,[[],]],[44,9,6,1,[[],]],[44,10,61,1,[[],]],[44,10,144,1,[[],]],[45,0,39,1,[[],]],[45,2,6,1,[[],]],[45,2,39,1,[[],]],[45,3,6,4,[[],[],[],[],]],[45,3,39,2,[[],[],]],[45,3,74,3,[[],[],[],]],[45,3,91,3,[[],[],[],]],[45,3,134,1,[[],]],[45,5,6,2,[[],[],]],[45,5,39,1,[[],]],[45,5,74,6,[[],[],[],[],[],[],]],[45,5,91,4,[[],[],[],[],]],[45,5,134,5,[[],[],[],[],[],]],[45,7,91,1,[[],]],[46,0,79,1,[[],]],[46,0,120,1,[[],]],[46,0,127,1,[[],]],[46,2,74,1,[[],]],[46,3,42,1,[[],]],[46,3,72,1,[[],]],[46,3,74,2,[[],[],]],[46,3,79,3,[[],[],[],]],[46,3,90,5,[[],[],[],[],[],]],[46,3,102,3,[[],[],[],]],[46,3,120,2,[[],[],]],[46,3,127,1,[[],]],[46,4,3,1,[[],]],[46,5,3,5,[[],[],[],[],[],]],[46,5,42,5,[[],[],[],[],[],]],[46,5,72,3,[[],[],[],]],[46,5,79,3,[[],[],[],]],[46,5,90,2,[[],[],]],[46,5,120,1,[[],]],[46,5,127,3,[[],[],[],]],[46,6,102,1,[[],]],[46,6,120,1,[[],]],[46,7,3,1,[[],]],[47,0,85,2,[[],[],]],[47,0,116,1,[[],]],[47,1,34,1,[[],]],[47,1,85,1,[[],]],[47,2,6,1,[[],]],[47,3,53,1,[[],]],[47,3,72,2,[[],[],]],[47,3,88,1,[[],]],[47,3,121,1,[[],]],[47,3,150,2,[[],[],]],[47,5,6,1,[[],]],[47,5,34,1,[[],]],[47,5,85,2,[[],[],]],[47,5,116,1,[[],]],[47,5,121,1,[[],]],[47,5,150,1,[[],]],[47,6,72,1,[[],]],[47,8,121,1,[[],]],[47,9,48,1,[[],]],[47,9,127,1,[[],]],[48,3,3,3,[[],[],[],]],[48,3,48,1,[[],]],[48,3,52,2,[[],[],]],[48,3,61,1,[[],]],[48,3,62,1,[[],]],[48,3,72,2,[[],[],]],[48,3,87,3,[[],[],[],]],[48,3,88,2,[[],[],]],[48,3,90,1,[[],]],[48,3,107,1,[[],]],[48,3,108,2,[[],[],]],[48,3,123,1,[[],]],[48,4,107,1,[[],]],[48,5,28,1,[[],]],[48,5,48,1,[[],]],[48,5,61,1,[[],]],[48,5,62,2,[[],[],]],[48,5,72,3,[[],[],[],]],[48,5,87,1,[[],]],[48,5,88,1,[[],]],[48,5,107,1,[[],]],[48,5,108,1,[[],]],[48,5,144,4,[[],[],[],[],]],[48,6,90,1,[[],]],[48,7,123,1,[[],]],[48,8,3,1,[[],]],[48,9,72,1,[[],]],[49,0,150,1,[[],]],[49,3,9,2,[[],[],]],[49,3,13,1,[[],]],[49,3,90,3,[[],[],[],]],[49,3,107,4,[[],[],[],[],]],[49,3,109,1,[[],]],[49,3,127,1,[[],]],[49,3,150,1,[[],]],[49,5,9,3,[[],[],[],]],[49,5,14,1,[[],]],[49,5,21,2,[[],[],]],[49,5,40,2,[[],[],]],[49,5,90,4,[[],[],[],[],]],[49,5,109,4,[[],[],[],[],]],[49,5,127,3,[[],[],[],]],[49,5,150,7,[[],[],[],[],[],[],[],]],[49,6,13,1,[[],]],[49,7,40,1,[[],]],[49,8,90,1,[[],]],[49,10,9,1,[[],]],[49,10,127,1,[[],]],[50,0,88,1,[[],]],[50,1,154,1,[[],]],[50,2,88,1,[[],]],[50,2,89,1,[[],]],[50,3,17,1,[[],]],[50,3,62,3,[[],[],[],]],[50,3,72,1,[[],]],[50,3,74,1,[[],]],[50,3,88,1,[[],]],[50,3,89,1,[[],]],[50,3,154,1,[[],]],[50,3,158,1,[[],]],[50,5,17,3,[[],[],[],]],[50,5,62,2,[[],[],]],[50,5,72,2,[[],[],]],[50,5,74,2,[[],[],]],[50,5,82,1,[[],]],[50,5,88,1,[[],]],[50,5,89,3,[[],[],[],]],[50,5,154,1,[[],]],[50,5,158,2,[[],[],]],[50,9,72,1,[[],]],[50,9,74,1,[[],]],[50,9,158,1,[[],]],[50,10,88,1,[[],]],[51,0,74,1,[[],]],[51,0,107,1,[[],]],[51,1,107,1,[[],]],[51,3,6,3,[[],[],[],]],[51,3,17,2,[[],[],]],[51,3,26,1,[[],]],[51,3,74,4,[[],[],[],[],]],[51,3,102,1,[[],]],[51,3,107,3,[[],[],[],]],[51,3,149,3,[[],[],[],]],[51,5,6,2,[[],[],]],[51,5,17,2,[[],[],]],[51,5,26,3,[[],[],[],]],[51,5,74,2,[[],[],]],[51,5,102,2,[[],[],]],[51,5,107,6,[[],[],[],[],[],[],]],[51,5,149,6,[[],[],[],[],[],[],]],[51,6,149,1,[[],]],[51,7,74,1,[[],]],[51,8,17,1,[[],]],[52,3,17,2,[[],[],]],[52,3,39,2,[[],[],]],[52,3,69,1,[[],]],[52,3,83,1,[[],]],[52,3,87,2,[[],[],]],[52,3,95,1,[[],]],[52,3,112,1,[[],]],[52,3,142,1,[[],]],[52,5,39,1,[[],]],[52,5,69,1,[[],]],[52,5,87,2,[[],[],]],[52,5,95,1,[[],]],[52,5,107,1,[[],]],[52,5,112,2,[[],[],]],[52,5,142,1,[[],]],[52,6,17,1,[[],]],[53,3,6,2,[[],[],]],[53,3,17,2,[[],[],]],[53,3,48,1,[[],]],[53,3,53,1,[[],]],[53,3,55,2,[[],[],]],[53,3,61,3,[[],[],[],]],[53,3,74,1,[[],]],[53,3,101,1,[[],]],[53,3,106,1,[[],]],[53,3,151,1,[[],]],[53,5,6,1,[[],]],[53,5,17,2,[[],[],]],[53,5,53,1,[[],]],[53,5,55,1,[[],]],[53,5,61,3,[[],[],[],]],[53,5,74,1,[[],]],[53,5,101,4,[[],[],[],[],]],[53,5,105,4,[[],[],[],[],]],[53,5,106,1,[[],]],[53,5,151,5,[[],[],[],[],[],]],[53,7,61,1,[[],]],[53,8,61,1,[[],]],[53,9,106,1,[[],]],[53,10,48,1,[[],]],[53,10,101,1,[[],]],[54,1,59,1,[[],]],[54,3,26,1,[[],]],[54,3,121,1,[[],]],[54,5,3,1,[[],]],[54,5,26,2,[[],[],]],[54,5,59,2,[[],[],]],[54,5,72,2,[[],[],]],[54,5,74,2,[[],[],]],[54,5,88,3,[[],[],[],]],[54,5,118,2,[[],[],]],[54,5,144,2,[[],[],]],[54,6,74,1,[[],]],[55,0,144,1,[[],]],[55,3,8,1,[[],]],[55,3,20,1,[[],]],[55,3,39,2,[[],[],]],[55,3,53,3,[[],[],[],]],[55,3,55,1,[[],]],[55,3,74,1,[[],]],[55,3,91,1,[[],]],[55,3,144,2,[[],[],]],[55,3,146,2,[[],[],]],[55,4,144,1,[[],]],[55,5,8,3,[[],[],[],]],[55,5,20,2,[[],[],]],[55,5,39,5,[[],[],[],[],[],]],[55,5,53,4,[[],[],[],[],]],[55,5,55,2,[[],[],]],[55,5,74,2,[[],[],]],[55,5,90,1,[[],]],[55,5,91,1,[[],]],[55,5,144,4,[[],[],[],[],]],[55,6,39,1,[[],]],[55,6,146,1,[[],]],[55,7,20,1,[[],]],[55,7,39,1,[[],]],[55,7,53,1,[[],]],[55,7,146,1,[[],]],[55,8,55,1,[[],]],[55,10,39,1,[[],]],[55,10,74,1,[[],]],[56,1,81,1,[[],]],[56,3,28,1,[[],]],[56,3,35,2,[[],[],]],[56,3,63,2,[[],[],]],[56,3,68,1,[[],]],[56,3,72,1,[[],]],[56,3,81,3,[[],[],[],]],[56,3,91,2,[[],[],]],[56,5,28,2,[[],[],]],[56,5,35,1,[[],]],[56,5,63,2,[[],[],]],[56,5,68,1,[[],]],[56,5,73,2,[[],[],]],[56,5,81,1,[[],]],[56,5,121,2,[[],[],]],[56,5,136,1,[[],]],[56,5,153,2,[[],[],]],[56,8,73,1,[[],]],[56,10,6,1,[[],]],[56,10,121,1,[[],]],[57,0,15,1,[[],]],[57,1,15,1,[[],]],[57,3,6,1,[[],]],[57,3,10,2,[[],[],]],[57,3,15,1,[[],]],[57,3,17,2,[[],[],]],[57,3,18,2,[[],[],]],[57,3,39,2,[[],[],]],[57,3,67,1,[[],]],[57,3,101,1,[[],]],[57,3,102,1,[[],]],[57,3,107,2,[[],[],]],[57,3,144,1,[[],]],[57,5,6,2,[[],[],]],[57,5,10,2,[[],[],]],[57,5,15,3,[[],[],[],]],[57,5,17,1,[[],]],[57,5,39,2,[[],[],]],[57,5,55,3,[[],[],[],]],[57,5,101,3,[[],[],[],]],[57,5,102,2,[[],[],]],[57,5,107,1,[[],]],[57,5,144,3,[[],[],[],]],[57,6,6,2,[[],[],]],[57,8,10,1,[[],]],[57,8,101,1,[[],]],[57,10,55,1,[[],]],[58,0,38,1,[[],]],[58,3,3,1,[[],]],[58,3,21,1,[[],]],[58,3,38,2,[[],[],]],[58,3,68,1,[[],]],[58,3,72,1,[[],]],[58,3,103,2,[[],[],]],[58,3,121,1,[[],]],[58,3,153,1,[[],]],[58,4,40,1,[[],]],[58,4,72,1,[[],]],[58,5,7,2,[[],[],]],[58,5,8,3,[[],[],[],]],[58,5,38,1,[[],]],[58,5,40,3,[[],[],[],]],[58,5,55,1,[[],]],[58,5,68,1,[[],]],[58,5,72,1,[[],]],[58,5,93,2,[[],[],]],[58,5,121,1,[[],]],[58,5,153,1,[[],]],[58,6,121,1,[[],]],[58,7,93,1,[[],]],[58,7,107,1,[[],]],[58,10,68,1,[[],]],[59,1,132,1,[[],]],[59,3,17,2,[[],[],]],[59,3,73,1,[[],]],[59,3,90,1,[[],]],[59,3,131,1,[[],]],[59,3,132,1,[[],]],[59,5,6,2,[[],[],]],[59,5,17,3,[[],[],[],]],[59,5,26,3,[[],[],[],]],[59,5,34,3,[[],[],[],]],[59,5,61,1,[[],]],[59,5,69,3,[[],[],[],]],[59,5,73,1,[[],]],[59,5,74,1,[[],]],[59,5,131,2,[[],[],]],[59,5,132,2,[[],[],]],[59,6,74,1,[[],]],[59,7,34,1,[[],]],[59,9,6,1,[[],]],[59,10,131,1,[[],]],];
mut_data.mutations_sum = 2096;
mut_data.subdata = [];
mut_data.Ids_keys = utils.create_key_list(mut_data.Ids);
mut_data.genes_keys = utils.create_key_list(mut_data.genes);

function calc_option(format, pos, sum, value) {
    
    var id = pos[0];
    var func = pos[1];
    var gene = pos[2];
    
    var obj = {id: mut_data.Ids[id], func: mut_data.funcs[func], gene: mut_data.genes[gene],
        '#number_gene': mut_data.genes.length, 
        '#number_id': mut_data.Ids.length, 
        '#number_mutaion_all': mut_data.mutations.length, 
        '#sum_mutaion_all': mut_data.mutations_sum,
        '#sum_item_value': sum,
        '#item_value': value,
    };

    return obj;
}
function tooltip_title(format, pos, sum) {
    
    var obj = calc_option(format, pos, sum, 0);
    
    var tooltip = [];
    for (var t in format.format) {
        tooltip.push(utils.text_format(format.format[t], obj));
    }
    return tooltip;
};

function tooltip_partial(format, pos, mutation, loop, value) {
    
    var obj = calc_option(format, pos, 0, value);
    
    var tooltip = [];
    for (var m in mutation) {
        for (var p = 0; p < mutation[m][4].length; p++) {
            for (var p2 = 0; p2 < mutation[m][4][p].length; p2++) {
                obj[mut_data.mutation_header[p2]] = mutation[m][4][p][p2];
            }
            for (var t in format.format) {
                var text = utils.text_format(format.format[t], obj);
                if (tooltip.indexOf(text) < 0){
                    tooltip.push(text);
                    if (loop == false) { break;}
                }
            }
            if (loop == false) { break;}
        }
        if (loop == false) { break;}
    }
    return tooltip;
};

mut_data.get_dataset_id = function () {
    
    var data = [];
    var keys = [];
    var tooltips = {};
    var sum_par_id = [];
    for (var i=0; i < mut_data.Ids_keys.length; i++) {
        tooltips[mut_data.Ids_keys[i]] = [];
        sum_par_id[i] = 0;
    }
    
    // par func
    for (var f=0; f < mut_data.funcs.length; f++) {

        data[f] = [];
        keys[f] = [];

        // par ID
        for (var i=0; i < mut_data.Ids_keys.length; i++) {
            
            var data_filt = mut_data.mutations.filter(function(item, index){
                if ((item[0] == i) && (item[1] == f)) return true;
            });
            
            var sum = 0;
            for (var d in data_filt) sum += data_filt[d][3];
            if (sum > 0) {
                data[f].push(sum);
                keys[f].push(mut_data.Ids_keys[i]);
                tooltips[mut_data.Ids_keys[i]].push(tooltip_partial(mut_data.tooltip_format.id_partial, [i, f, null], data_filt, false, sum));
                sum_par_id[i] += sum;
            }
        }
    }
    for (var i=0; i < mut_data.Ids_keys.length; i++) {
        title = tooltip_title(mut_data.tooltip_format.id_title, [i, null, null], sum_par_id[i]);
        for (var t = 0; t < title.length; t++) {
            tooltips[mut_data.Ids_keys[i]].splice(t, 0, title[t]);
        }
    }
    
    return {data: data, keys: keys, tooltips: tooltips};
};

mut_data.get_dataset_checker = function (func_flgs, use_genes) {
    
    // tooltips
    var tooltips_matrix = [];
    {
        for (var i in mut_data.Ids_keys) {
            tooltips_matrix[i] = {};
        }
        
        for (var d in mut_data.mutations) {
            var data = mut_data.mutations[d];
            if (func_flgs[mut_data.funcs[data[1]]] == false) continue;
            if (use_genes.indexOf(mut_data.genes_keys[data[2]]) < 0) continue;
            
            if (tooltips_matrix[data[0]][mut_data.genes_keys[data[2]]] == null) {
                var data_filt = mut_data.mutations.filter(function(item, index){
                    if ((item[0] == data[0]) && (item[2] == data[2])) return true;
                });
                
                var sum = 0;
                for (var d in data_filt) sum += data_filt[d][3];
                tooltips_matrix[data[0]][mut_data.genes_keys[data[2]]] = tooltip_title(mut_data.tooltip_format.checker_title, [data[0], null, data[2]], sum);
            }
            var texts = tooltip_partial(mut_data.tooltip_format.checker_partial, [data[0],data[1],data[2]], [data], true, 1);
            for (var t in texts) {
                tooltips_matrix[data[0]][mut_data.genes_keys[data[2]]].push(texts[t]);
            }
        }
    }
    
    var data = [];
    var keys = [];
    var keys2 = [];
    for (var f=0; f < mut_data.funcs.length; f++) {
        
        data[f] = [];
        keys[f] = [];
        keys2[f] = [];
        
        if (func_flgs[mut_data.funcs[f]] == false) continue;
        
        var data_filt = mut_data.mutations.filter(function(item, index){
            if (item[1] == f) return true;
        });
        
        // par data
        for (var d in data_filt) {
            if (use_genes.indexOf(mut_data.genes_keys[data_filt[d][2]]) < 0) continue;
            data[f].push(1);
            keys[f].push(mut_data.Ids_keys[data_filt[d][0]]);
            keys2[f].push(mut_data.genes_keys[data_filt[d][2]]);
        }
    }
    
    return {data: data, keys: keys, keys2: keys2, tooltips: tooltips_matrix};
};

function extract_gene(func_flgs, gene_th, gene_max, sort_name_y, sort_asc_y) {

    var gene_nums = [];
    {
        for (var g=0; g < mut_data.genes_keys.length; g++) {
            gene_nums[g] = 0;
        }
        var gene_Ids = [];
        for (var i in mut_data.Ids_keys) {
            gene_Ids[i] = [];
        }
        for (var d in mut_data.mutations) {
            var data = mut_data.mutations[d];
            if (func_flgs[mut_data.funcs[data[1]]] == false) continue;
            if (gene_Ids[data[0]].indexOf(data[2]) >= 0) continue;
            
            gene_Ids[data[0]].push(data[2]);
            gene_nums[data[2]] += 1;
        }
    }

    // sort
    var gene_obj = [];
    {
        for (var g in mut_data.genes_keys) {
            if (gene_nums[g] * 100.0 / mut_data.Ids_keys.length < gene_th) continue;
            if (gene_nums[g] == 0) continue;

            gene_obj.push({name: mut_data.genes[g], num: gene_nums[g]});
        }
        
        var ret = 1;
        if (sort_asc_y[0] == false) ret = -1;
        
        gene_obj.sort(function (a, b) {
            
            if (sort_name_y[0] == "number_of_mutations") {

                if( a.num < b.num ) return -ret;
                if( a.num > b.num ) return ret;
                if( a.name < b.name ) return -ret;
                if( a.name > b.name ) return ret;
                return 0;
            }
            if (sort_name_y[0] == "name") {

                if( a.name < b.name ) return -ret;
                if( a.name > b.name ) return ret;
                return 0;
            }
        });
    }

    var gene_nums_ex = [];
    var gene_keys = [];
    var gene_names = [];
    for (var g in gene_obj) {
        if (g >= gene_max) break;
        gene_nums_ex.push(gene_obj[g].num);
        gene_keys.push(mut_data.genes_keys[mut_data.genes.indexOf(gene_obj[g].name)]);
        gene_names.push(gene_obj[g].name);
    }
    
    return {keys: gene_keys, names: gene_names, values: gene_nums_ex, uncut_length: gene_obj.length};
};

mut_data.get_dataset_gene = function (func_flgs, gene_th, gene_max, sort_name_y, sort_asc_y) {
    
    var gene_nums = [];
    var genes = [];
    
    for (var f=0; f < mut_data.funcs.length; f++) {
        gene_nums[f] = [];
        genes[f] = [];
    }
    var ex_genes = extract_gene(func_flgs, gene_th, gene_max, sort_name_y, sort_asc_y);

    var gene_ids = [];
    var tooltips = {};
    for (var ex_g=0; ex_g < ex_genes.keys.length; ex_g++) {
        var g = mut_data.genes_keys.indexOf(ex_genes.keys[ex_g]);
        gene_ids[ex_g] = [];
        tooltips[ex_genes.keys[ex_g]] = tooltip_title(mut_data.tooltip_format.gene_title, [null, null, g], ex_genes.values[ex_g]);
    }
    
    // par func
    for (var f=0; f < mut_data.funcs.length; f++) {
        if (func_flgs[mut_data.funcs[f]] == false) continue;
        // par gene
        for (var ex_g=0; ex_g < ex_genes.keys.length; ex_g++) {
            var g = mut_data.genes_keys.indexOf(ex_genes.keys[ex_g]);
            var data_filt = mut_data.mutations.filter(function(item, index){
                if ((item[2] == g) && (item[1] == f)) return true;
            });
            var sum = 0;
            // par data
            for (var d=0; d < data_filt.length;d++) {
                if (gene_ids[ex_g].indexOf(data_filt[d][0]) >= 0) continue;
                gene_ids[ex_g].push(data_filt[d][0]);
                sum = sum + 1;
            }
            if (sum > 0) {
                var value = sum * 100.0 / mut_data.Ids_keys.length;
                
                gene_nums[f].push(value);
                genes[f].push(ex_genes.keys[ex_g]);
                
                var texts = tooltip_partial(mut_data.tooltip_format.gene_partial, [null, f, g], data_filt, false, sum);
                for (var t in texts) {
                    tooltips[ex_genes.keys[ex_g]].push(texts[t]);
                }
            }
        }
    }

    return {data: gene_nums, keys: genes, tooltips: tooltips, total_keys: ex_genes.keys, total_names: ex_genes.names, total_nums: ex_genes.values, uncut_length: ex_genes.uncut_length};
};
    
mut_data.get_id_nums = function (func_flgs, data, keys) {

    var id_nums = [];
    for (var i in mut_data.Ids_keys) {
        id_nums[i] = 0;
    }
    
    for (var f=0; f < data.length; f++) {
        if (func_flgs[mut_data.funcs[f]] == false) continue;
        
        for (var d=0; d < data[f].length; d++) {
            id_nums[mut_data.Ids_keys.indexOf(keys[f][d])] += data[f][d];
        }
    }
    
    return id_nums;
};

// for water-fall
mut_data.get_id_flg_par_gene = function (name, func_flgs) {
    
    var id_nums = [];
    
    // par ID
    var idx_g = 0;
    
    for (var g=0; g < mut_data.genes_keys.length; g++) {
        if (mut_data.genes_keys[g] == name) {
            idx_g = g;
            break;
        }
    }
    
    for (var i in mut_data.Ids_keys) {
        
        var data_filt = mut_data.mutations.filter(function(item, index){
            if ((item[2] == idx_g) && (item[0] == i)) return true;
        });
        
        var sum = 0;
        // par data
        for (var d=0; d < data_filt.length;d++) {
            // count only visible funcs
            if (func_flgs[mut_data.funcs[data_filt[d][1]]] == false) continue;
            sum = 1;
            break;
        }
        
        id_nums.push(sum);
    }
    
    return id_nums;
};

mut_data.get_sub_data = function (name) {
    
    var sub = {}
    // par sub
    for (var i = 0; i < mut_data.subdata.length; i++) {
        if (mut_data.subdata[i].name == name) {
            sub = mut_data.subdata[i];
            break;
        }
    }
    if (sub.length == 0) return {};

    // par item
    var stack_length = sub.item.length;
    if (sub.type == "range") stack_length = stack_length + 1;
    if (sub.type == "gradient") {
        
        var gradient_stack = [];
        for (var i=0; i < sub.data.length; i++) {
            gradient_stack.push(sub.data[i][1]);
        }
        gradient_stack.sort(function(a,b){
            if( a < b ) return -1;
            if( a > b ) return 1;
            return 0;
        });
        var gradient_stack_d = gradient_stack.filter(function (x, i, self) {
            return self.indexOf(x) === i;
        });
        stack_length = gradient_stack_d.length;
    }
    
    var stack = [];
    tooltips = {};
    
    for (var i=0; i < stack_length; i++) {
        stack[i] = {};
        stack[i].data = [];
        stack[i].keys = [];
        
        if (sub.type == "gradient") {
            stack[i].color_n = "";
        }
        else {
            stack[i].color_n = sub.colors_n[i];
        }
    }
    
    // par data
    for (var i=0; i < sub.data.length; i++) {
        
        var id = mut_data.Ids_keys[sub.data[i][0]];
        var s = -1;
        var val = "";
        
        if (sub.type == "range") {
            val = sub.data[i][1];
            for (var l=0; l < sub.item.length; l++) {
                if (val < sub.item[l]) {
                    s = l;
                    break;
                }
            }
            if (s == -1) {
                s = sub.item.length;
            }
        }
        else if (sub.type == "gradient") {
            val = sub.data[i][1];
            for (var l=0; l < gradient_stack_d.length; l++) {
                if (val == gradient_stack_d[l]) {
                    s = l;
                    break;
                }
            }
            if (stack[s].color_n == "") {
                stack[s].color_n = utils.color_gradient(val, sub.item, sub.colors_n);
            }
        }
        else { // "fix"
            s = sub.data[i][1];
            if (s >= sub.item.length) {
                console.log(name + ": not contain:" + s);
                continue;
            }
            val = sub.item[s];
        }
        
        var p = stack[s].data.length;
        stack[s].data[p] = 1;
        stack[s].keys[p] = id;
        tooltips[id] = [id + ", " + val];
    }
    
    return {stack: stack, tooltips: tooltips, label: {type: sub.type, text: sub.label, color: sub.colors_n}};
};
mut_data.get_sub_values = function (name) {
    var values = [];
    
    for (var f = 0; f < mut_data.subdata.length; f++) {
        if (mut_data.subdata[f].name != name) continue;
        
        // par ID
        for (var i in mut_data.Ids_keys) {
            
            var data_filt = mut_data.subdata[f].data.filter(function(item, index){
                if (item[0] == i) return true;
            });
            
            values.push(data_filt[0][1]);
        }
        break;
    }
    return values;
};

})();

Object.freeze(mut_data);
